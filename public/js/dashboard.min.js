$(document).ready(function () {
    $('.overflow-auto').height($(window).height() * 0.7);
    loading(true);

    var roundDecimal = function (val, precision) {
        return Math.round(Math.round(val * Math.pow(10, (precision || 0) + 1)) / 10) / Math.pow(10, (precision || 0));
    }

    var initialing_live_append = [], jq = function (myid) {
        return "#" + myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
    }, get_space = function (total, available) {
        return roundDecimal(((total - available) / total) * 100, 2);
    }, get_local = function (date) {
        return moment(date).local().format('YYYY-MM-DD HH:mm:ss');
    }, get_progress = function (value) {
        var cls = '';
        if (value > 90)
            cls = 'bg-danger';
        else if (value > 60)
            cls = 'bg-warning';
        else if (value > 40)
            cls = 'bg-info';
        else
            cls = 'bg-success';

        return cls;
    }, in_streaming = {}, in_viewing = {

    },exist = function (arr, search) {
        return arr.some(row => row.includes(search));
    }, changestatus = function (action, groupID, id, data){
        var ipAddress = '', icon = '',title = [langDict.fr,langDict.lpr,langDict.or,langDict.mmr,langDict.ipAddress];
        var id1 = md5('online_user_' + id), id2 = md5('online_only_user_' + id);
        if(action == 'online') {
            ipAddress = '<input type="text" class="form-control form-control-sm" value="'+data[4]+'" disabled>';
            icon = 'lawngreen';
            for (const i in data) if (data[i] && i < 4) {
                var col = parseInt(i) + 1;
                $('#jsgrid_' + id1 + '_col' + col).html('<i class="fas fa-check" title="'+title[i]+'"></i>');
            }
        }else {
            for(var i = 1; i < 4; i++)  $('#jsgrid_' + id1 + '_col' + i).html('');
            $('#online_only_tree').jstree().delete_node(id2);
        }
        $('#' + id1 + '_anchor').find('i').css('color', icon);
        $('#jsgrid_' + id1 + '_col5').html(ipAddress);
    }, live_append = function (data) {
        ajax('PUT', '/agent/api', data_format('/api/connections', 0, 'GET', {}, null), function (a) {
            if(!a.error && Object.keys(a).length){
                var tmp = [];
                for (const i in a) {
                    if (!exist(object.connection, a[i].userAccount)){
                        var status = [1, a[i].lpr, a[i].or, a[i].mmr, a[i].ipAddress];
                        changestatus('online', a[i].groupID, a[i].userAccount, status);

                        $('#online_only_tree').jstree().create_node(md5('online_only_group_'+ a[i].groupID), {
                            'text': a[i].userAccount,
                            'icon': icons.online,
                            'state': {'selected': false},
                            'id': md5('online_only_user_' + a[i].userAccount),
                            'a_attr': {'class': ''},
                            'data': {
                                'id': 'online_only_user_' + a[i].userAccount,
                                'fr': ( a[i].fr) ? '<i class="fas fa-check" title="'+langDict.fr+'"></i>' : '',
                                'lpr': ( a[i].lpr) ? '<i class="fas fa-check" title="'+langDict.lpr+'"></i>' : '',
                                'or': ( a[i].or) ? '<i class="fas fa-check" title="'+langDict.or+'"></i>' : '',
                                'mmr': ( a[i].mmr) ? '<i class="fas fa-check" title="'+langDict.mmr+'"></i>' : '',
                                'ipAddress': (data[4]) ? '<input type="text" class="form-control form-control-sm" value="'+ a[i].ipAddress +'" disabled>' : ''
                            }
                        },'first');
                    }
                    tmp.push([a[i].userAccount, a[i].groupID, [a[i].fr, a[i].lpr, a[i].or, a[i].mmr, a[i].ipAddress]]);
                }

                for (const i in object.connection) if(!exist( tmp, object.connection[i][0]))
                    changestatus('offline', object.connection[i][1], object.connection[i][0], [0,0,0,0,'']);
                object.connection = tmp;

            }else if(!Object.keys(a).length){
                for (const i in object.connection) changestatus('offline', object.connection[i][1], object.connection[i][0], [0,0,0,0,'']);
                object.connection = [];
            }
        });
        //console.log(data);

        var recv = function (_gid, _target, _num) { // current only maxIn cell

            var node = $('#streaming_tree').jstree('get_node', _gid);

            if (node) {
                $('#streaming_tree').jstree('_open_to', _gid);

                var parents = node.parents;
                parents.pop(); // pop # of root group
                parents.push(_gid);

                // hint: hide node will get element failed, so open_node need first
                for (var i in parents) {
                    var group = $('#streaming_tree').jstree('get_node', parents[i]),
                        using = $(jq('jsgrid_' + group.id + (_target == 'maxIn' ? '_col1' : '_col2'))).find('span').find('input').eq(0),
                        val = parseInt(using.val()) + _num;

                    val <= 0 && (val = 0);

                    using.attr('value', val).val(val);
                    if (_target == 'maxIn')
                        group.data.maxIn = $(jq('jsgrid_' + group.id + '_col1')).find('span').html();
                    else if (_target == 'maxOut')
                        group.data.maxOut = $(jq('jsgrid_' + group.id + '_col2')).find('span').html();
                }
            }
        };

        var recorder = moment().unix(), total_viewing = 0;

        //if ($('#streaming_tree').jstree('get_node', '#'))

        for (var live in data) {

            total_viewing += data[live].viewer.length;

            var streaming = data[live], gid = streaming.groupId;

            if (!(streaming.id in in_streaming)) {
                recv('streaming_group_' + gid, 'maxIn', 1); // update # of using

                if (!$('#loading_tree').jstree('get_node', 'loading_' + streaming.site + '_group_' + gid)) {
                    $('#loading_tree').jstree().create_node('#loading_' + streaming.site, {
                        "text": object._group[gid],
                        'id': 'loading_' + streaming.site + '_group_' + gid,
                        "icon": icons.users,
                        "state": {"selected": false},
                        "children": [],
                        "data": {}
                    }, "first", function () {
                        $('#loading_tree').jstree('_open_to', 'loading_' + streaming.site + '_group_' + gid);
                    });
                }

                $('#loading_tree').jstree().create_node('loading_' + streaming.site + '_group_' + gid, {
                    "text": streaming.user.id,
                    'id': 'loading_live_' + streaming.id,
                    "icon": icons.online,
                    "state": {"selected": false},
                    "more": streaming,
                    "children": [],
                    "data": {
                        "source": '<input type="text" class="form-control form-control-sm" value="' + streaming.ip + '" disabled>',
                        "title": '<div class="input-group"><input type="text" class="form-control form-control-sm cell-input-title" placeholder="' + langDict.title + '" data-id="' + streaming.user.id + '" value="' + streaming.user.video.title + '" data-origin="' + streaming.user.video.title + '"><div class="input-group-append"> <button type="button" class="btn btn-sm btn-primary cell-input-btn" data-id="' + streaming.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-check"></i></button></div></div>',
                        'play': '<div class="input-group"><button type="button" class="btn btn-sm btn-info streaming-preview" data-id="' + streaming.id + '"><i class="fa fa-play"></i></button></div>',
                        'manage': '<div class="input-group"><button type="button" class="btn btn-sm btn-danger live-disconnect" data-id="' + streaming.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-unlink"></i></button></div>'
                    }
                }, "first", function () {
                    $('#loading_tree').jstree('open_node', 'loading_' + streaming.site + '_group_' + gid);
                });

                $('#streaming_tree').jstree().create_node('#streaming_group_' + gid, {
                    "text": streaming.user.id,
                    'id': 'streaming_live_' + streaming.id,
                    "icon": icons.online,
                    "state": {"selected": false},
                    "more": streaming,
                    "children": [],
                    "data": {
                        "source": '<input type="text" class="form-control form-control-sm" value="' + streaming.ip + '" disabled>',
                        "title": '<div class="input-group"><input type="text" class="form-control form-control-sm cell-input-title" placeholder="' + langDict.title + '" data-id="' + streaming.user.id + '" value="' + streaming.user.video.title + '" data-origin="' + streaming.user.video.title + '"><div class="input-group-append"> <button type="button" class="btn btn-sm btn-primary cell-input-btn" data-id="' + streaming.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-check"></i></button></div></div>',
                        'play': '<div class="input-group"><button type="button" class="btn btn-sm btn-info streaming-preview" data-id="' + streaming.id + '"><i class="fa fa-play"></i></button></div>',
                        'manage': '<div class="input-group"><button type="button" class="btn btn-sm btn-danger live-disconnect" data-id="' + streaming.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-unlink"></i></button></div>'
                    }
                }, "first", function () {
                    $('#streaming_tree').jstree('_open_to', 'streaming_group_' + gid);
                });
            } else {  // update node

                $.each(['streaming', 'loading'], function (i, v) {
                    var node_id = v + '_live_' + streaming.id,
                        node = $('#' + v + '_tree').jstree('get_node', node_id);
                    if (node) {
                        node.original.more = streaming;
                        node.data.source = '<input type="text" class="form-control form-control-sm" value="' + streaming.ip + '" disabled>';
                        node.data.title = '<div class="input-group"><input type="text" class="form-control form-control-sm cell-input-title" placeholder="' + langDict.title + '" data-id="' + streaming.user.id + '" value="' + streaming.user.video.title + '" data-origin="' + streaming.user.video.title + '"><div class="input-group-append"> <button type="button" class="btn btn-sm btn-primary cell-input-btn" data-id="' + streaming.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-check"></i></button></div></div>';
                        //$(jq('jsgrid_' + node_id + '_col3')).find('input').attr('data-origin', streaming.user.video.title);
                        //$(jq('jsgrid_' + node_id + '_col5')).find('input').attr('value', streaming.ip).val(streaming.ip);

                        var img = $('#player_modal').find('.modal-body').find('img');
                        if (img.is(":visible") && img.attr('data-id') == streaming.id) img.attr('src', streaming.snapshotUrl);
                        $('#' + v + '_tree').jstree('redraw_node', node_id);
                    }
                });
            }
            in_streaming[streaming.id] = recorder;

            for (var i in streaming.viewer) {
                var viewer = streaming.viewer[i];

                if (!(viewer.id in in_viewing)) {
                    recv('streaming_group_' + gid, 'maxOut', 1);

                    $('#loading_tree').jstree().create_node('#loading_live_' + streaming.id, {
                        "text": viewer.user.id,
                        'id': 'loading_view_' + viewer.id,
                        "icon": icons.play,
                        "state": {"selected": false},
                        "more": viewer,
                        "a_attr": {"class": "text-secondary"},
                        "children": [],
                        "data": {
                            "source": '<input type="text" class="form-control form-control-sm" value="' + viewer.ip + '" disabled>',
                            'title': '',
                            'play': '',
                            'manage': '<div class="input-group"><button type="button" class="btn btn-sm btn-danger viewer-disconnect" data-id="' + viewer.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-unlink"></i></button></div>'
                        }
                    }, "first", function () {
                        $('#loading_tree').jstree('_open_to', 'loading_view_' + viewer.id);
                    });

                    $('#streaming_tree').jstree().create_node('#streaming_live_' + streaming.id, {
                        "text": viewer.user.id,
                        'id': 'streaming_view_' + viewer.id,
                        "icon": icons.play,
                        "state": {"selected": false},
                        "more": viewer,
                        "a_attr": {"class": "text-secondary"},
                        "data": {
                            "source": '<input type="text" class="form-control form-control-sm" value="' + viewer.ip + '" disabled>',
                            'title': '',
                            'play': '',
                            'manage': '<div class="input-group"><button type="button" class="btn btn-sm btn-danger viewer-disconnect" data-id="' + viewer.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-unlink"></i></button></div>'
                        }
                    }, "first", function () {
                        $('#streaming_tree').jstree('_open_to', 'streaming_view_' + viewer.id);
                    });
                } else {  // update node
                    $.each(['streaming', 'loading'], function (i, v) {
                        var node_id = v + '_view_' + viewer.id,
                            node = $('#' + v + '_tree').jstree('get_node', node_id);
                        if (node) {
                            node.original.more = viewer;
                            node.data.source = '<input type="text" class="form-control form-control-sm" value="' + viewer.ip + '" disabled>';
                            $(jq('jsgrid_' + node_id + '_col5')).find('input').attr('value', viewer.ip).val(viewer.ip);
                        }
                    });
                }
                in_viewing[viewer.id] = recorder;
            }
        }

        // delete un-viewing user
        for (var id in in_viewing) if (in_viewing[id] != recorder) {
            delete in_viewing[id];
            recv('streaming_group_' + gid, 'maxOut', -1);
            $('#streaming_tree').jstree().delete_node('streaming_view_' + id, function () {
            });
            $('#loading_tree').jstree().delete_node('loading_view_' + id, function () {
            });
        }
        // delete un-streaming user
        for (var id in in_streaming) if (in_streaming[id] != recorder) {
            recv('streaming_group_' + gid, 'maxIn', -1);
            delete in_streaming[id];
            $('#streaming_tree').jstree().delete_node('streaming_live_' + id, function () {
            });
            $('#loading_tree').jstree().delete_node('loading_live_' + id, function () {
            });
        }

        for (const i in object.site) {

            const maxtIn = $(`#loading_${object.site[i]['more']['id']}`).find('.online').length,
                maxOut = $(`#loading_${object.site[i]['more']['id']}`).find('.fa-play').length;

            $(`#jsgrid_loading_${object.site[i]['more']['id']}_col1`).find('input[data-target="loading-maxIn"]').attr('value', maxtIn).val(maxtIn);
            $(`#jsgrid_loading_${object.site[i]['more']['id']}_col2`).find('input[data-target="loading-maxOut"]').attr('value', maxOut).val(maxOut);
        }

    }, site_node = function (id, origin) {

        // var cluster = {
        //     'text': id,
        //     'icon': 'fas fa-sitemap',
        //     'state': {'selected': false, 'hidden': false},
        //     'children': []
        // };

        var cluster = [];

        for (var i in origin) {
            var node = origin[i];

            var cpu = node.cpuUsedPercent.toFixed(1),
                mem = get_space(node.memoryTotal, node.memoryAvailable),
                storage = get_space(node.totalSpace, node.freeSpace),
                updateTime = get_local(node.updateTime);

            var data = {
                'text': node.id,
                'icon': icons.server,
                'state': {'selected': false, 'hidden': false},
                'id': md5(node.id),
                'children': [],
                'more': node,
                'data': {
                    'cpu': '<div class="progress" style="height: calc(1.5em + .5rem + 2px);"><div class="progress-bar ' + get_progress(cpu) + '" aria-valuenow="' + cpu + '" style="width: ' + cpu + '%"> ' + cpu + '%</div></div>',
                    'memory': '<div class="d-flex"><div class="w-100"><div class="progress" style="height: calc(1.5em + .5rem + 2px);"><div class="progress-bar ' + get_progress(mem) + '" aria-valuenow="' + mem + '" style="width: ' + mem + '%" aria-valuemin="0" aria-valuemax="100">' + mem + '%</div></div></div><div class="ml-auto"><button type="button" class="btn btn-outline-dark btn-sm free-space-btn" style="height: calc(1.2em + .5rem + 2px); margin-top: -15px; padding: .0rem .5rem" data-free="' + formatBytes(node.memoryAvailable) + '">' + formatBytes(node.memoryTotal) + '</button></div></div>',
                    'storage': '<div class="d-flex"><div class="w-100"><div class="progress" style="height: calc(1.5em + .5rem + 2px);"><div class="progress-bar ' + get_progress(storage) + '" aria-valuenow="' + storage + '" style="width: ' + storage + '%" aria-valuemin="0" aria-valuemax="100">' + storage + '%</div></div></div><div class="ml-auto"><button type="button" class="btn btn-outline-dark btn-sm free-space-btn" style="height: calc(1.2em + .5rem + 2px); margin-top: -15px; padding: .0rem .5rem" data-free="' + formatBytes(node.freeSpace) + '">' + formatBytes(node.totalSpace) + '</button></div></div>',
                    'ip': '<div class="input-group"><input type="text" class="form-control form-control-sm" value="' + node.internalIp + '" readonly></div>',
                    'version': '<div class="input-group"><input type="text" class="form-control form-control-sm" value="' + node.version + '" readonly></div>',
                    'updateTime': '<div class="input-group"><input type="text" class="form-control form-control-sm" value="' + updateTime + '" readonly></div>',
                    'manage': '<div class="input-group"><button type="button" class="btn btn-sm btn-info server-site-info" data-id="' + node.id + '"><i class="fas fa-cog"></i></button></div>',
                }
            };

            for (var j in node.service) {
                var srv = node.service[j],
                    srv_storage = get_space(srv.totalSpace, srv.freeSpace),
                    srv_updateTime = get_local(srv.updateTime);

                // must be wait tree initialing ready
                if ('live' in srv) {
                    for (var _pub in srv.live) srv.live[_pub]['site'] = node.id;
                    initialing_live_append.push((srv.live));
                }

                data.children.push({
                    'text': j,
                    'icon': 'fas fa-angle-double-right',
                    'state': {'selected': false, 'hidden': false},
                    'id': md5(node.id + '_' + j),
                    'more': srv,
                    'children': [],
                    'data': {
                        'cpu': '',
                        'memory': '',
                        'storage': srv_storage ? '<div class="d-flex"><div class="w-100"><div class="progress" style="height: calc(1.5em + .5rem + 2px);"><div class="progress-bar ' + get_progress(srv_storage) + '" aria-valuenow="' + srv_storage + '" style="width: ' + srv_storage + '%" aria-valuemin="0" aria-valuemax="100">' + srv_storage + '%</div></div></div><div class="ml-auto"><button type="button" class="btn btn-outline-dark btn-sm free-space-btn" style="height: calc(1.2em + .5rem + 2px); margin-top: -15px; padding: .0rem .5rem" data-free="' + formatBytes(srv.freeSpace) + '">' + formatBytes(srv.totalSpace) + '</button></div></div>' : '',
                        'ip': srv.internalIp ? '<input type="text" class="form-control form-control-sm" value="' + srv.internalIp + '" readonly>' : '',
                        'version': '<input type="text" class="form-control form-control-sm" value="' + srv.version + '" readonly>',
                        'updateTime': srv.updateTime ? '<input type="text" class="form-control form-control-sm" value="' + srv_updateTime + '" readonly>' : '',
                        'manage': '',
                    }
                });
            }
            //cluster.children.push(data);
            //cluster = data;
            cluster.push(data);
        }
        return cluster;
    }, get_group_cell = function (origin, first) {
        origin.group.maxIn || (origin.group.maxIn = 0);
        origin.group.maxOut || (origin.group.maxOut = 0);
        var data = {}, textboxt = function (group, val, target) {
            var style = '';
            if ($('[name="_custom"]').attr('content') == 'npa') style = ' style="display: none" ';
            var btn_pre = '<div class="input-group-prepend"' + style + '><button class="btn btn-outline-secondary btn-sm license-btn" type="button" ' + (first ? 'disabled' : '') + '><i class="fas fa-minus"></i></button></div>',
                btn_apn = '<div class="input-group-append"' + style + '><button class="btn btn-outline-secondary btn-sm license-btn" type="button" ' + (first ? 'disabled' : '') + '><i class="fas fa-plus"></i></button></div>',
                using = '<input type="text" class="text-center form-control form-control-sm text-info" data-target="' + target + '-using" data-id="' + group.id + '" value="0" disabled>',
                allocated = '<input type="text" class="text-center form-control form-control-sm" data-origin="' + val[target] + '" data-target="' + target + '-allocated" data-id="' + group.id + '" value="' + val[target] + '"' + style + 'disabled>',
                maximum = '<input type="text" class="text-center form-control form-control-sm" data-origin="' + group[target] + '" data-target="' + target + '" data-id="' + group.id + '" value="' + group[target] + '"' + style + 'disabled>';

            return '<div class="input-group">' + btn_pre + (using + allocated + maximum) + btn_apn + '</div>';
        };
        var count = {'maxIn': 0, 'maxOut': 0}, _chld = origin['children'];
        if (_chld) for (var i in count) for (var j in _chld)
            count[i] += (_chld[j].group[i] ? _chld[j].group[i] : 0);
        else
            count = {'maxIn': origin.group.maxIn, 'maxOut': origin.group.maxOut};

        for (var i in count) data[i] = textboxt(origin.group, count, i);
        return data;
    }, recursive = function (origin, prefix, first) {

        object._group[origin.group.id] = origin.group.name;

        var data = {
            'text': origin.group.name,
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': prefix + '_group_' + origin.group.id,
            'a_attr': {'class': 'text-primary'},
            'data': {
                'maxIn': '',
                'maxOut': '',
                'source': '',
                'title': '',
                'play': '',
                'manage': ''
            }
        };
        var cell = get_group_cell(origin, first);
        data.data.maxIn = cell.maxIn;
        data.data.maxOut = cell.maxOut;
        first = false;
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i], prefix, first));

        return data;
    }, connection_recursive = function (origin, onlyGroup, prefix){
        var real_gid = prefix + '_group_' + origin.group.id, md5_gid = md5(real_gid);

        var group_node_id = md5(prefix + '_group_' + origin.group.id), data = {
            'text': origin.group.name,
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': md5_gid,
            'a_attr': {'class': 'text-primary'}
        };
        var users = [];
        if (!onlyGroup) {
            users = origin.userList;
            data.data = {
                'id': origin.group.name,
                'fr': '',
                'lpr': '',
                'or': '',
                'mmr': '',
                'ipAddress': ''
            };
        }
        if (users.length) {
            /*-------- user sorting --------*/
            users = users.sort(function (a, b) {
                return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
            });
            // let manage and lock account to top
            var _users = [], _list = [];
            for (var i in users) if (is_manage(users[i].permission)) {
                _users.push(users[i]);
                _list.push(users[i].id);
            }
            for (var i in users) if (users[i].locked && !es5_includes(_list, users[i].id)) {
                _users.push(users[i]);
                _list.push(users[i].id);
            }
            for (var i in users) if (!es5_includes(_list, users[i].id)) _users.push(users[i]);
            users = _users;
            /*-------- end sort --------*/
            for (var i in users) {
                var user = users[i], icon = icons.video, _class = 'text-secondary',
                    real_uid = prefix + '_user_' + user.id, md5_uid = md5(real_uid);

                user.name = user.info.name;
                user.permission && is_manage(user.permission) && (icon = icons.manager, _class = '');
                user.locked && (icon = icons.lock, _class = 'text-danger');

                user.gid = origin.group.id;
                user.group = origin.group.name;
                user.layer = origin.group.layer;

                // var _options = gen_permission(user.permission);

                var name = (user.name) ? "&ensp;(" + user.name + ")" : "";
                var obj = {
                    'text': user.id + name,
                    'icon': icon,
                    'state': {'selected': false},
                    'more': user,
                    'id': md5_uid,
                    'a_attr': {'class': _class},
                    'data': {
                        'id': user.id,
                        'fr': '',
                        'lpr': '',
                        'or': '',
                        'mmr': '',
                        'ipAddress': ''
                    }
                };
                data.children.push(obj);
            }
        }
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(connection_recursive(chld[i], onlyGroup, prefix));
        return data;
    };

    var object = {
        'site': [],
        'group': [],
        '_count': 0,
        '_group': {},
        'connection': []
    }, get_site_tree = function (cb) {

        ajax('PUT', '/agent/api', data_format('/api/server/list', 0, 'GET', {}, null), function (a) {
            if (a.error)
                $.growl.error({message: a.error});
            else {
                const cluster = a;

                for (var name in cluster) {
                    const node = cluster[name];
                    object.site = site_node(name, node);
                }

                var loading_tree = [];

                for (var i in object.site) if (object.site[i].children) for (var j in object.site[i].children) if (object.site[i].children[j].more.live) {
                    loading_tree.push({
                        'text': object.site[i].more.id,
                        'icon': icons.server,
                        'state': {'selected': false},
                        'more': object.site[i].children[j].more,
                        'children': [],
                        'id': 'loading_' + object.site[i].more.id,
                        'a_attr': {'class': 'text-primary'},
                        'data': {
                            'maxIn': '<input type="text" class="form-control form-control-sm text-center text-info" data-target="loading-maxIn" value="0" readonly>',
                            'maxOut': '<input type="text" class="form-control form-control-sm  text-center text-info" data-target="loading-maxOut" value="0" readonly>',
                            'source': '<input type="text" class="form-control form-control-sm" value="' + object.site[i].more.externalIp + '" readonly>',
                            'title': '',
                            'play': '',
                            'manage': ''
                        }
                    });
                }

                var maxInStr = langDict.maxIn,
                    maxOutStr = langDict.maxOut;

                $('#loading_tree').jstree({
                    "plugins": ["wholerow", "changed", "search", 'ui', 'grid'],
                    'core': {
                        'data': loading_tree,
                        'themes': {
                            'name': 'proton',
                            "variant": "large"
                        },
                        'check_callback': true
                    },
                    "search": {"show_only_matches": false, "show_only_matches_children": false},
                    "grid": {
                        'columns': [{'width': '30%', 'header': '&nbsp;', 'value': 'id'},
                            {'width': '10%', 'header': maxInStr, 'value': "maxIn"},
                            {'width': '10%', 'header': maxOutStr, 'value': "maxOut"},
                            {'width': '24%', 'header': langDict.title, value: "title"},
                            {'width': '5%', 'header': langDict.preview, value: "play"},
                            {'width': '26%', 'header': langDict.source, value: "source"},
                            {'width': '5%', 'header': langDict.ban, value: "manage"}],
                        'resizable': true
                    }
                }).bind("ready.jstree", function (event, data) {
                    object._count += 1;
                });

                $('#grid_tree').jstree({
                    "plugins": ["wholerow", "changed", "grid", 'ui'],
                    'core': {
                        'data': object.site,
                        'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                        'check_callback': true
                    },
                    "grid": {
                        columns: [
                            {'width': '25%', 'header': '&nbsp;', 'value': 'id'},
                            {'width': '10%', 'header': 'CPU', 'value': "cpu"},
                            {'width': '15%', 'header': langDict.memory, 'value': "memory"},
                            {'width': '20%', 'header': langDict.space, value: "storage"},
                            {'width': '10%', 'header': langDict.ipAddress, value: "ip"},
                            {'width': '5%', 'header': langDict.version, value: "version"},
                            {'width': '10%', 'header': langDict.lastUpdate, value: "updateTime"},
                            {'width': '5%', 'header': langDict.manage, value: "manage"}
                        ], resizable: true
                    }
                }).bind("ready.jstree", function (event, data) {
                    $(this).jstree("open_all");
                    object._count += 1;
                    cb(a);
                });
            }
        });

    }, get_group_tree = function (cb) {

        ajax('PUT', '/agent/api', data_format('/api/group/tree', 0, 'GET', {}, null), function (a) {
            if (a.error)
                $.growl.error({message: a.error});
            else {
                var maxInStr = langDict.maxIn + ' (' + langDict.used + ' / ' + langDict.quota + ')',
                    maxOutStr = langDict.maxOut + ' (' + langDict.used + ' / ' + langDict.quota + ')',
                    columns = [
                        {'width': '30%', 'header': '&nbsp;', 'value': 'id'},
                        {'width': '15%', 'header': maxInStr, 'value': "maxIn"},
                        {'width': '15%', 'header': maxOutStr, 'value': "maxOut"},
                        {'width': '20%', 'header': langDict.title, value: "title"},
                        {'width': '5%', 'header': langDict.preview, value: "play"},
                        {'width': '10%', 'header': langDict.source, value: "source"},
                        {'width': '5%', 'header': langDict.ban, value: "manage"}
                    ];

                object.group = recursive(a, 'streaming', true);

                if ($('[name="_custom"]').attr('content') == 'npa') {
                    columns = [
                        {'width': '40%', 'header': '&nbsp;', 'value': 'id'},
                        {'width': '5%', 'header': maxInStr, 'value': "maxIn"},
                        {'width': '5%', 'header': maxOutStr, 'value': "maxOut"},
                        {'width': '30%', 'header': langDict.title, value: "title"},
                        {'width': '5%', 'header': langDict.preview, value: "play"},
                        {'width': '15%', 'header': langDict.source, value: "source"},
                        {'width': '5%', 'header': langDict.ban, value: "manage"}
                    ];
                }

                $('#streaming_tree').jstree({
                    "plugins": ["wholerow", "changed", "search", 'ui', 'grid'],
                    'core': {
                        'data': object.group,
                        'themes': {
                            'name': 'proton',
                            "variant": "large"
                        },
                        'check_callback': true
                    },
                    "search": {"show_only_matches": false, "show_only_matches_children": false},
                    "grid": {
                        'columns': columns,
                        'resizable': true
                    }
                }).bind("ready.jstree", function (event, data) {
                    object._count += 1;
                    cb(a);
                });
            }
        });

    }, _polling = function () {

        ajax('PUT', '/agent/api', data_format('/api/server/list', 0, 'GET', {}, null), function (a) {
            if (a.error)
                $.growl.error({message: a.error});
            else {
                var _live = [];

                for (var i in a) for (var j in a[i]) {

                    var node = a[i][j], cpu = node.cpuUsedPercent.toFixed(1),
                        mem = get_space(node.memoryTotal, node.memoryAvailable),
                        space = get_space(node.totalSpace, node.freeSpace);

                    object[node.id] = node;  //assign cluster to object

                    var _cpu_bar = $('#jsgrid_' + md5(node.id) + '_col1').find('.progress-bar');
                    _cpu_bar.attr('aria-valuenow', cpu).css('width', cpu + '%').html(cpu + '%').removeClass('bg-danger bg-warning bg-info bg-success').addClass(get_progress(cpu));

                    var _mem_bar = $('#jsgrid_' + md5(node.id) + '_col2').find('.progress-bar');
                    _mem_bar.attr('aria-valuenow', mem).css('width', mem + '%').html(mem + '%').removeClass('bg-danger bg-warning bg-info bg-success').addClass(get_progress(mem));
                    _mem_bar.closest('.d-flex').find('buttton[type=button]').attr('data-free', formatBytes(node.memoryAvailable));

                    var _space_bar = $('#jsgrid_' + md5(node.id) + '_col3').find('.progress-bar');
                    _space_bar.attr('aria-valuenow', space).css('width', space + '%').html(space + '%').removeClass('bg-danger bg-warning bg-info bg-success').addClass(get_progress(space));
                    _space_bar.closest('.d-flex').find('buttton[type=button]').attr('data-free', formatBytes(node.freeSpace));

                    var _ip_input = $('#jsgrid_' + md5(node.id) + '_col4').find('input[type=text]');
                    _ip_input.attr('value', node.internalIp).val(node.internalIp);

                    var _ver_input = $('#jsgrid_' + md5(node.id) + '_col5').find('input[type=text]');
                    _ver_input.attr('value', node.version).val(node.version);

                    var _upt_input = $('#jsgrid_' + md5(node.id) + '_col6').find('input[type=text]');
                    _upt_input.attr('value', node.updateTime).val(get_local(node.updateTime));

                    for (var k in node.service) {
                        var srv = node.service[k], srv_space = get_space(srv.totalSpace, srv.freeSpace),
                            srv_id = md5(node.id + '_' + k);

                        if ('live' in srv) for (var _i in srv.live) {
                            // manual add
                            srv.live[_i]['site'] = node.id;
                            _live.push(srv.live[_i]);
                        }
                        //console.log(srv);

                        if (srv.freeSpace) {  // has space field
                            const _space_bar = $('#jsgrid_' + srv_id + '_col3').find('.progress-bar');
                            _space_bar.attr('aria-valuenow', srv_space).css('width', srv_space + '%').html(srv_space + '%').removeClass('bg-danger bg-warning bg-info bg-success').addClass(get_progress(srv_space));
                            _space_bar.closest('.d-flex').find('buttton[type=button]').attr('data-free', formatBytes(srv.freeSpace));
                        }

                        const _ip_input = $('#jsgrid_' + srv_id + '_col4').find('input[type=text]');
                        _ip_input.attr('value', srv.internalIp).val(srv.internalIp);

                        const _ver_input = $('#jsgrid_' + srv_id + '_col5').find('input[type=text]');
                        _ver_input.attr('value', srv.version).val(srv.version);

                        const _upt_input = $('#jsgrid_' + srv_id + '_col6').find('input[type=text]');
                        _upt_input.attr('value', srv.updateTime).val(get_local(srv.updateTime));
                    }
                }
                live_append(_live);
            }
            setTimeout(_polling, 5000);
        });
    };

    var not_poll = false, initialing = function () {
        for (var i in initialing_live_append) live_append(initialing_live_append[i]);
        initialing_live_append = [];
        not_poll || setTimeout(_polling, 5000);
        loading(false);
    };

    get_group_tree(function (_g) {
        object._count == 3 && setTimeout(initialing, 300);
    });

    get_site_tree(function (_s) {
        _s.error && (not_poll = true);
        object._count == 3 && setTimeout(initialing, 300);
    });

    ajax('PUT', '/agent/api', data_format('/api/user-info/tree', 0, 'GET', {}, null), function (a) {
        if (a.error)
            $.growl.error({message: a.error});
        else {
            loading(false);

            $('#online_tree').jstree({
                "plugins": ["wholerow", "changed", "search", "grid", 'ui'],
                "search": {"show_only_matches": false, "show_only_matches_children": false},
                'core': {
                    'data': connection_recursive(a, false, 'online'),
                    'themes': {
                        'name': 'proton',
                        'responsive': true,
                        'variant': 'large'
                    }, "dnd": {
                        'copy_modifier': false,
                        'check_while_dragging': true
                    }, 'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '20%'},
                        {'header': langDict.fr, 'value': 'fr', 'width': '8%'},
                        {'header': langDict.lpr, 'value': 'lpr', 'width': '8%'},
                        {'header': langDict.or, 'value': 'or', 'width': '8%'},
                        {'header': langDict.mmr, 'value': 'mmr', 'width': '8%'},
                        {'header': langDict.ipAddress, 'value': 'ipAddress', 'width': '20%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree changed.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', md5('online_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                    $(this).jstree('open_all');
                }
            }).on('open_node.jstree', function () {
                for (const i in object.connection) changestatus('online',object.connection[i][1], object.connection[i][0], object.connection[i][2]);
            });

            $('#online_only_tree').jstree({
                "plugins": ["wholerow", "changed", "search", "grid", 'ui'],
                "search": {"show_only_matches": false, "show_only_matches_children": false},
                'core': {
                    'data': connection_recursive(a, true, 'online_only'),
                    'themes': {
                        'name': 'proton',
                        'responsive': true,
                        'variant': 'large'
                    }, "dnd": {
                        'copy_modifier': false,
                        'check_while_dragging': true
                    }, 'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '20%'},
                        {'header': langDict.fr, 'value': 'fr', 'width': '8%'},
                        {'header': langDict.lpr, 'value': 'lpr', 'width': '8%'},
                        {'header': langDict.or, 'value': 'or', 'width': '8%'},
                        {'header': langDict.mmr, 'value': 'mmr', 'width': '8%'},
                        {'header': langDict.ipAddress, 'value': 'ipAddress', 'width': '20%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree changed.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', md5('online_only_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                    $(this).jstree('open_all');
                }
            });

        }
    });

    $('#online_display').on('change', function(){
        $('.connection').css('display', 'none');
        $('#'+$(this).val()).css('display', 'block');
    });


    $('#streaming_search_btn').on('click', function (e) {
        var btn = $(this), val = btn.closest('form').find('input').val(), tree = $('#streaming_tree');

        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    $('#loading_search_btn').on('click', function (e) {
        var btn = $(this), val = btn.closest('form').find('input').val(), tree = $('#loading_tree');

        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    $('#online_search_btn').on('click', function (e) {
        var btn = $(this), val = btn.closest('form').find('input').val(), tree = $('#online_tree'), tree2 = $('#online_only_tree');

        val && (btn.button('loading'), setTimeout(function () {
            try {
                if($('#online_all').css('display') == 'none'){
                    tree2.jstree(true).search(val);
                    tree2.find('.jstree-search:eq(0)')[0].scrollIntoView();
                }else{
                    tree.jstree(true).search(val);
                    tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
                }
                btn.closest('form').find('input').val('');
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    var action;
    $(document).on('mousedown mouseup', '.license-btn', function (e) {
        var btn = $(this), checked = false, onclick = function () {
            var inputs = btn.closest('.input-group').find('input'), allocated = inputs.eq(1), maximum = inputs.eq(2),
                id = allocated.attr('data-id'), node = $('#streaming_tree').jstree('get_node', 'streaming_group_' + id),
                col = allocated.closest('.jstree-grid-cell').attr('id').replace('jsgrid_streaming_group_' + id + '_', ''),
                _parent = $('#streaming_tree').jstree('get_node', node.parent);

            if (_parent) {

                var _parent_inputs = $('#jsgrid_' + _parent.id + '_' + col).find('input[type=text]'),
                    _parent_allocated = _parent_inputs.eq(1), _parent_maximum = _parent_inputs.eq(2);

                var add = btn.find('i').hasClass('fa-plus'), checked = false,
                    license = [parseInt(allocated.val()), parseInt(maximum.val())],
                    _parent_license = [parseInt(_parent_allocated.val()), parseInt(_parent_maximum.val())];

                var children = 0, _children = node.children;

                for (var i in _children) if (!(_children[i].startsWith('streaming_live'))) children += 1;

                if (add)
                    checked = (_parent_license[0] < _parent_license[1]) && ((license[1] + 1) <= _parent_license[1]);
                else
                    checked = ((license[0] > 0) && children == 0) || ((license[1] - 1) >= license[0]) && ((license[1] - 1) <= _parent_license[1]);

                if (checked) {
                    add ? (license[1] += 1, _parent_license[0] += 1) : (license[1] -= 1, _parent_license[0] -= 1);

                    var _value = children == 0 ? license[1] : license[0];
                    allocated.attr('value', _value).val(_value);
                    maximum.attr('value', license[1]).val(license[1]);

                    _parent_allocated.attr('value', _parent_license[0]).val(_parent_license[0]);
                    _parent_maximum.attr('value', _parent_license[1]).val(_parent_license[1])

                    return 1;
                } else {
                    $.growl.warning({message: (add ? langDict.group + ' ' + _parent.text + ' ' : '') + langDict.insufficient});

                    return 0;
                }
            }
        };
        if (!btn.prop('disabled')) if (e.type == 'mousedown') {
            onclick();
            btn.prop('disabled') || (action = setInterval(function () {
                onclick() || clearInterval(action);
            }, 120));
        } else clearInterval(action);
    });

    $('#license_apply').on('click', function (e) {
        var group = [], _group = {}, count = 0;
        $.each($('#streaming_tab').find('input'), function (index, element) {
            var id = $(this).attr('data-id'), val = $(this).val(), target = $(this).attr('data-target');
            if (es5_includes(['maxIn', 'maxOut'], target)) {
                var info = $('#streaming_tree').jstree('get_node', 'streaming_group_' + id).original.more;

                if (info[target] != parseInt(val)) {
                    if (!(id in _group)) {
                        _group[id] = count;
                        count += 1;
                        group.push({'id': id});
                    }
                    group[_group[id]][target] = parseInt(val);
                }
            }
        });

        if (Object.keys(group).length == 0) {
            $.growl.warning({message: langDict.notChanged});
        } else {
            for (var gid in group) (function (gid) {  // step by step
                ajax('PUT', '/agent/api', data_format('/api/group', 0, 'PUT', group[gid], null), function (a) {

                    var node = $('#streaming_tree').jstree('get_node', 'streaming_group_' + group[gid].id);

                    if (a.error)
                        $.growl.error({message: langDict.group + ': ' + node.text + ', ' + a.error});
                    else {
                        // update node original data
                        for (var field in group[gid]) node.original.more[field] = group[gid][field];

                        //jsgrid_streaming_group_{}_col1, maxIn
                        //jsgrid_streaming_group_{}_col2, maxOut
                        for (var i = 1; i <= 2; i++) {
                            var inputs = $('#jsgrid_streaming_group_' + group[gid].id + '_col' + i).find('span').find('input'),
                                allocated = inputs.eq(1), maximum = inputs.eq(2);

                            allocated.attr('data-origin', allocated.val());
                            maximum.attr('data-origin', maximum.val());
                        }

                        //$('#jsgrid_streaming_group_' + group[gid].id + '_col1').find('span').find('input').attr('data-origin')
                        //$('#jsgrid_streaming_group_' + group[gid].id + '_col2').find('span').find('input').attr('data-origin')

                        node.data.maxIn = $('#jsgrid_streaming_group_' + group[gid].id + '_col1').find('span').html();
                        node.data.maxOut = $('#jsgrid_streaming_group_' + group[gid].id + '_col2').find('span').html();

                        $.growl.notice({message: langDict.group + ': ' + node.text + ', ' + langDict.wasModified});
                    }
                });
            })(gid);
        }
    });
    $('#license_revert').on('click', function (e) {
        var group = [], _group = {};
        $.each($('#streaming_tab').find('input'), function (index, element) {
            var id = $(this).attr('data-id'), target = $(this).attr('data-target'),
                node = $('#streaming_tree').jstree('get_node', 'streaming_group_' + id);

            if ($(this).attr('data-origin')) $(this).val($(this).attr('data-origin'));
        });
    });

    $(document).on('click', '.free-space-btn', function (e) {
        $.growl.warning({message: langDict.freeSpace + ' ' + $(this).attr('data-free')});
    });

    $(document).on('click', '[class*=cell-input-]', function (e) {
        $(this).focus();
    });

    $(document).on('click', '.cell-input-btn', function (e) {
        var btn = $(this), input = btn.closest('.input-group').find('.cell-input-title');
        if (input) {
            var id = btn.attr('data-id'), user = input.attr('data-id'),
                _node = $('#streaming_tree').jstree(true).get_node('streaming_live_' + id);

            if (input.val() == input.attr('value')) {
                $.growl.warning({message: langDict.notChanged});
            } else {
                btn.button('loading');
                ajax('PUT', '/agent/api', data_format('/api/user', 0, 'PUT', {
                    'id': user,
                    'videoTitle': input.val()
                }, null), function (a) {
                    btn.button('reset');
                    if (a.error)
                        $.growl.error({message: a.error});
                    else {
                        input.attr({'value': input.val(), 'data-origin': input.val()});
                        _node.data.title = input.closest('span').html();  // clone input-group
                        _node.original.more.user.video.title = input.val();  // update tree node raw data
                        $.growl.notice({message: langDict['wasModified']});
                    }
                });
            }
        }
    });

    $(document).on('click', '.streaming-preview', function (e) {
        var btn = $(this), id = btn.attr('data-id'), modal = $('#player_modal'),
            node = $('#streaming_tree').jstree('get_node', 'streaming_live_' + id);
        if (node) {
            var html = '', data = node.original.more;

            modal.find('.modal-title').html(data.user.id);

            html += '<tr><th class="info">' + langDict.id + '</th><td>' + data.user.id + '</td></tr>';
            html += '<tr><th class="info">' + langDict.name + '</th><td>' + data.user.info.name + '</td></tr>';
            html += '<tr><th class="info">' + langDict.title + '</th><td>' + data.user.video.title + '</td></tr>';
            if (data.gps && data.gps.timestamp) {
                var url = 'https://maps.google.com/maps?q=' + data.gps.latitude + ',' + data.gps.longitude;
                html += '<tr><th class="info">GPS</th><td>' + moment(data.gps.timestamp).format('YYYY-MM-DD HH:mm:ss') + ': <br /><a href="' + url + '" target="_blank">' + data.gps.latitude + ', ' + data.gps.longitude + '</a></td></tr>';
            } else
                html += '<tr><th class="info">GPS</th><td></td></tr>';
            html += '<tr><th class="info">' + langDict.deviceSn + '</th><td>' + data.device.id + '</td></tr>';
            html += '<tr><th class="info">' + langDict.deviceName + '</th><td>' + data.device.info.name + '</td></tr>';
            html += '<tr><th class="info">' + langDict.deviceType + '</th><td>' + data.device.info.type + '</td></tr>';
            html += '<tr><th class="info">' + langDict.snapshotUrl + '</th><td><a href="' + data.snapshotUrl + '" target="_blank">' + '(´・ω・`)' + '</a></td></tr>';
            html += '<tr><th class="info">' + langDict.rtspUrl + '</th><td><a href="' + data.videoUrl + '" target="_blank">' + '(´・ω・`)' + '</a></td></tr>';

            modal.find('.modal-body').find('img').attr({'src': data.snapshotUrl, 'data-id': data.id});
            modal.find('.modal-body').find('tbody').html(html);

            modal.modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
        }
    });

    $(document).on('click', '.live-disconnect,.viewer-disconnect', function (e) {
        var btn = $(this), id = btn.attr('data-id'), node, target;
        if (btn.hasClass('live-disconnect')) {
            target = 'stream';
            node = $('#streaming_tree').jstree('get_node', 'streaming_live_' + id);
        } else if (btn.hasClass('viewer-disconnect')) {
            target = 'viewer';
            node = $('#streaming_tree').jstree('get_node', 'streaming_view_' + id);
        }

        if (node && target) {
            bootbox.confirm({
                'title': langDict.aruYouSure,
                'message': langDict.doYouWantBan + ' ' + node.original.more.user.id + ' ' + langDict[target] + ' ?',
                'buttons': {
                    'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict.cancel},
                    'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict.apply}
                },
                'callback': function (confirm) {
                    if (confirm) {
                        btn.button('loading');
                        ajax('PUT', '/agent/api', data_format('/api/live/' + target + '/stop', 0, 'POST', {
                            'id': id,
                            'suspend': parseInt($('#suspend').val())
                        }, null), function (a) {
                            if (a.error) {
                                $.growl.error({message: a.error});
                                btn.button('reset');
                            } else {
                                //reset
                                var node_id = '';

                                if (target == 'stream') {
                                    in_streaming[node.original.more.id] = 0;
                                    node_id = 'loading_live_' + node.original.more.id;
                                } else {
                                    in_viewing[node.original.more.id] = 0;
                                    node_id = 'loading_view_' + node.original.more.id;
                                }

                                $('#streaming_tree').jstree().delete_node(node.id, function () {
                                });
                                $('#loading_tree').jstree().delete_node(node_id, function () {
                                });

                                $.growl.notice({message: langDict.wasBan});
                            }
                        });
                    }
                }
            });
        }
    });

    $('#suspend').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        $('#suspend2').val($(this).val()).selectpicker('refresh');
    });
    $('#suspend2').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        $('#suspend').val($(this).val()).selectpicker('refresh');
    });

    $(document).on('click', '.server-site-info', function (e) {
        $('#server_modal').removeAttr('data-id');
        var btn = $(this), id = btn.attr('data-id'), node = object[id];
        if (node) {
            $('#server_modal').attr('data-id', node.id).find('.modal-title').html(node.id);
            $('#keepSpace').val(node.keepSpace).selectpicker('refresh');
            $('#domain').val(node.domain);
            $('#externalIp').val(node.externalIp);
            $('#enabled').prop('checked', node.enabled);

            var form = $('#domain').closest('.form-group').clone();
            $('#service_group').html('');

            //console.log(node.service)

            for (var i in node.service) if ('externalIp' in node.service[i]) {
                var srv = node.service[i], _form = form.clone();

                _form.find('.col-form-label').html(i + ':');
                _form.find('#domain').attr({
                    'id': srv.id + '_domain',
                    'value': srv.domain,
                    'data-id': srv.id
                });
                _form.find('#externalIp').attr({
                    'id': srv.id + '_externalIp',
                    'value': srv.externalIp,
                    'data-id': srv.id
                });
                _form.find('#enabled').attr({
                    'id': srv.id + '_enabled',
                    'data-id': srv.id
                });

                if (srv.enabled) _form.find('#' + srv.id + '_enabled').attr({
                    'checked': srv.enabled
                });

                $('#service_group').append('<div class="form-group">' + _form.html() + '</div>');
            }

            $('#server_modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
        }
    });

    $(document).on('click', 'button[id$=_apply], button[id$=_reset] , button[id$=_restart]', function (e) {
        var btn = $(this), id = $('#server_modal').attr('data-id'), node = object[id], btns = function (action) {
            $('#server_apply').button(action);
            $('#server_reset').button(action);
            $('#server_close').button(action);
            $('#server_restart').button(action);
        };
        switch (e.target.id) {
            case 'server_restart':
                $('#server_modal').hide();

                bootbox.confirm({
                    'title': langDict['aruYouSure'],
                    'message': langDict['doYouWantRestart'] + ' ' + id + ' ?',
                    'buttons': {
                        'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                        'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
                    },
                    'callback': function (confirm) {

                        $('#server_modal').show();

                        if (confirm) {
                            btns('loading');
                            ajax('PUT', '/agent/api', data_format('/api/server/restart', 0, 'POST', {'id': id}, null), function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    $.growl.notice({message: langDict['wasRestart']});
                                    btns('reset');
                                }
                            });
                        }
                    }
                });
                break;
            case 'server_reset':
                $('#keepSpace').val(node.keepSpace).selectpicker('refresh');
                $('#domain').val(node.domain);
                $('#externalIp').val(node.externalIp);
                $('#enabled').prop('checked', node.enabled);

                for (var i in node.service) {
                    var srv = node.service[i];
                    $('#' + srv.id + '_domain').attr('value', srv.domain).val(srv.domain);
                    $('#' + srv.id + '_externalIp').attr('value', srv.externalIp).val(srv.externalIp);
                    $('#' + srv.id + '_enabled').prop('checked', srv.enabled);
                }
                break;
            case 'server_apply':
                var core = {'id': node.id}, count = 0, sub = {}, _count = 0;

                if ($('#domain').val() != node.domain) core.domain = $('#domain').val();
                if ($('#externalIp').val() != node.externalIp) core.externalIp = $('#externalIp').val();
                if ($('#keepSpace').val() != node.keepSpace) core.keepSpace = parseInt($('#keepSpace').val());
                if ($('#enabled').val() != node.enabled) core.enabled = +($('#enabled').prop('checked'));

                for (var i in node.service) {
                    var srv = node.service[i];
                    sub[srv.id] = {};
                    if ($('#' + srv.id + '_domain').val() != srv.domain) sub[srv.id].domain = $('#' + srv.id + '_domain').val();
                    if ($('#' + srv.id + '_externalIp').val() != srv.externalIp) sub[srv.id].externalIp = $('#' + srv.id + '_externalIp').val();
                    if (+$('#' + srv.id + '_enabled').prop('checked') != srv.enabled) sub[srv.id].enabled = +$('#' + srv.id + '_enabled').prop('checked');
                }

                if (Object.keys(core).length > 1) {
                    count += 1;
                    ajax('PUT', '/agent/api', data_format('/api/server', 0, 'PUT', core, null), function (a) {
                        if (a.error)
                            $.growl.error({message: a.error});
                        else {
                            'domain' in core && (node.domain = core.domain);
                            'externalIp' in core && (node.externalIp = core.externalIp);
                            'keepSpace' in core && (node.keepSpace = core.keepSpace);
                            'enabled' in core && (node.enabled = core.enabled);
                            _count += 1;
                            count == _count && (btns('reset'), $.growl.notice({message: langDict['wasModified']}));
                        }
                    });
                }
                for (var i in sub) if (Object.keys(sub[i]).length) {
                    count += 1;
                    sub[i].id = $('#server_modal').attr('data-id');

                    ajax('PUT', '/agent/api', data_format('/api/server/' + i, 0, 'PUT', sub[i], null), function (a) {
                        if (a.error)
                            $.growl.error({message: a.error});
                        else {
                            for (var filed in sub[i]) for (var j in node.service) if (node.service[j].id == i) {
                                node.service[j][filed] = sub[i][filed];
                                break;
                            }
                            _count += 1;
                            count == _count && (btns('reset'), $.growl.notice({message: langDict['wasModified']}));
                        }
                    });
                }
                count && btns('loading');
                break;
        }
    });
});